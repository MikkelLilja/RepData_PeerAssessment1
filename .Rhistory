install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
head(iris)
lapply(split(iris$Sepal.Length, iris$Species), mean)
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
a <- with(mtcars, tapply(hp, cyl, mean))
a[3] - a[1]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1)
x
mean(X)
mean(x)
makeVector(x)
xCreated <- makeVector(x)
xCreated
cachemean(x)
cachemean(xCreated)
cachemean(xCreated)
cachemean(xCreated)
cachemean(xCreated)
cachemean(xCreated)
x <- c(2,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1)
cachemean(xCreated)
x <- c(1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1)
xCreated <- makeVector(x)
cachemean(xCreated)
M <- matrix(3,2,c(1,2,3,4,5,6))
M
M <- matrix(c(1,2,3,4,5,6), 3, 2)
M
solve(M)
M <- matrix(c(1,2,3,4), 2, 2)
solve(M)
class(M)
makeCacheMatrix <- function(M) {
i <- NULL
set <- function(A) {
M <<- A
i <<- NULL
}
get <- function() M
setInverse <- function(solve) i <<- solve
getInverse <- function() i
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(M, ...) {
i <- M$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- M$get()
i <- solve(data, ...)
x$setInverse(i)
i
}
Mcreated <- makeCacheMatrix(M)
cacheSolve(Mcreated)
Mcreated
cacheSolve <- function(M, ...) {
i <- M$getInverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- M$get()
i <- solve(data, ...)
M$setInverse(i)
i
}
M <- matrix(c(1,2,3,4), 2, 2)
solve(M)
Mcreated <- makeCacheMatrix(M)
cacheSolve(Mcreated)
cacheSolve(Mcreated)
cacheSolve(Mcreated)
M <- matrix(c(2,2,3,4), 2, 2)
solve(M)
cacheSolve(Mcreated)
Mcreated <- makeCacheMatrix(M)
cacheSolve(Mcreated)
M <- matrix(c(1,2,3,4), 2, 2)
M2 <- matrix(c(2,2,3,4), 2, 2)
M <- matrix(c(1,2,3,4), 2, 2)
M2 <- matrix(c(2,2,3,4), 2, 2)
Mcreated2 <- makeCacheMatrix(M2)
cacheSolve(Mcreated)
cacheSolve(Mcreated)
cacheSolve(Mcreated2)
cacheSolve(Mcreated2)
cacheSolve(Mcreated)
M <- matrix(c(1,20,3,4), 2, 2)
solve(M)
Mcreated <- makeCacheMatrix(M)
cacheSolve(Mcreated)
cacheSolve(Mcreated2)
cacheSolve(Mcreated)
library(dplyr)
a <- c(1,2,-3,10)
a <- data.frame(x = a)
a
subset(a, 0 < x < 4)
subset(a, 0 < x)
subset(a, 0 < x & x < 4)
upperLimit <- 120
library(dplyr)
library(xlsx)
pageviews <- 10566941
filename <- "3rdOfAugust.xlsx"
upperLimit <- 120
a <- 1
directory <- "C:/Users/Mikkel.A.Lilja/Desktop/Coursera/reproducibleResearcht"
setwd(directory)
getwd()
directory <- "C:/Users/Mikkel.A.Lilja/Desktop/Coursera/reproducibleResearch"
setwd(directory)
directory <- "C:/Users/Mikkel.A.Lilja/Desktop/Coursera/reproducibleResearch/RepData_PeerAssessment1"
setwd(directory)
read.csv("/activity/activity.csv")
read.csv("activity/activity.csv")
activity <- read.csv("activity/activity.csv")
head(activity)
str(activity)
act <- read.csv("activity/activity.csv")
with(act, split(steps, date))
with(act, lapply(split(steps, date), FUN = sum))
with(act, lapply(split(steps, date), FUN = sum), na.rm = T)
subset(act, date == "2010-01-01")
head(act)
subset(act, date == "2010-10-01")
subset(act, date == "2012-10-01")
subset(act, date == "2012-10-01" & steps != NA)
subset(act, date == "2012-10-01" & steps != "NA")
listOfTotalSteps <- with(act, lapply(split(steps, date), FUN = sum), na.rm = T)
meanTotalSteps <- mean(listOfTotalSteps, na.rm = T)
listOfTotalSteps
meanTotalSteps <- mean(unlist(listOfTotalSteps), na.rm = T)
meanTotalSteps
test <- unlist(listOfTotalSteps)
for (i in 1:length(test)) {if test[i] == NA {test[i] <- 0}}
for (i in 1:length(test)) {if (test[i] == NA) {test[i] <- 0}}
test[1]
test[4]
test[1] == NA
test[1] == "NA"
test{[1]] == "NA"
test[[1]] == "NA"
test[[1]] == NA
test[[1]]
test[[1]] == NA
test[[1]] == Na
test[[1]] == "NA"
class(test[[1]])
as.string(test[[1]])
string(test[[1]])
as.str(test[[1]])
class(unclass(test[[1]]))
test[[1]]
mean(test)
mean(unlist(test)
)
mean(unlist(test), na.rm = T)
unlist(test)
medianTotalSteps <- median(unlist(listOfTotalSteps), na.rm = T)
hist(listOfTotalSteps)
hist(unlist(listOfTotalSteps)
)
hist(unlist(listOfTotalSteps))
hist(unlist(listOfTotalSteps), main = "Histogram of total steps taken by day", col = "green", xlab = "Daily total steps")
rug()
rug(hist)
rug(hist(unlist(listOfTotalSteps), main = "Histogram of total steps taken by day", col = "green", xlab = "Daily total steps"))
?rug
rug(hist(unlist(listOfTotalSteps), main = "Histogram of total steps taken by day", col = "green", xlab = "Daily total steps"))
hist(unlist(listOfTotalSteps), main = "Histogram of total steps taken by day", col = "green", xlab = "Daily total steps")
rug(unlist(listOfTotalSteps))
?hist
hist(unlist(listOfTotalSteps), breaks = 10, main = "Histogram of total steps taken by day", col = "green", xlab = "Daily total steps")
head(act)
str(act)
with(act, split(steps, interval))
with(act, lapply(split(steps, interval), FUN = sum))
with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
ListOfTotalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
totalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
totalStepsPrInterval
plot(totalStepsPrInterval)
plot(unique(act$interval), totalStepsPrInterval)
plot(unique(act$interval), totalStepsPrInterval, type = "l")
plot(intervals, totalStepsPrInterval, col = "blue", lwd = 2, type = "l")
intervals <- unique(act$interval)
totalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
plot(intervals, totalStepsPrInterval, col = "blue", lwd = 2, type = "l")
intervals
as.factor(intervals)
intervals <- as.factor(unique(act$interval))
totalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
plot(intervals, totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
intervals
?mod
?mode
?mod
?modulus
3 %% 60
3 %% 1
60 %% 1
55 %% 1
55/60
round(55/60)
intervals <- unique(act$interval)
test <- round(intervals/60)
test
2350/60
round(2350, -2)
test <- round(intervals, -2)
test
test <- round(intervals/100, -2)
test
test <- round(intervals, -2)/100
tset
test
intervalsHourly <- round(unique(act$interval), -2)/100
intervalsHourly
intervalByHour <- round(unique(act$interval), -2)/100
intervalsByHour <- round(unique(act$interval), -2)/100
intervalsByHour <- round(unique(act$interval), -2)/100
totalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
plot(as.factor(intervals), totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
intervalsByHour <- round(unique(act$interval), -2)/100
totalStepsPrInterval <- with(act, lapply(split(steps, intervalsByHour), FUN = sum, na.rm = T))
plot(as.factor(intervalsByHour), totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
length(intervals)
length(intervalsByHour)
length(totalStepsPrInterval)
totalStepsPrInterval <- with(act, lapply(split(steps, act$interval), FUN = sum, na.rm = T))
plot(as.factor(intervalsByHour), totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
length(totalStepsPrInterval)
totalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
plot(as.factor(intervalsByHour), totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
intervalsByHour <- round(unique(act$interval), -2)/100
totalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
plot(as.factor(intervalsByHour), totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
totalStepsPrInterval <- with(act, lapply(split(steps, unique(interval)), FUN = sum, na.rm = T))
plot(as.factor(intervalsByHour), totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
intervalsByHour <- round(unique(act$interval), -2)/100
totalStepsPrInterval <- with(act, lapply(split(steps, unique(interval)), FUN = sum, na.rm = T))
plot(as.factor(intervalsByHour), totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
totalStepsPrInterval
plot(intervalsByHour, totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
intervalByHour
plot(intervalsByHour, totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals", xlim=c(1,20))
intervals <- as.factor(unique(act$interval))
totalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
plot(intervals, totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Intervals")
act$intervals[50]
act$intervals
act$interval
unique(act$intervals)[50]
unique(act$intervals)
unique(act$interval)
unique(act$interval)[50]
unique(act$interval)[51]
unique(act$interval)[1]
intervals <- as.factor(unique(act$interval))
totalStepsPrInterval <- with(act, lapply(split(steps, interval), FUN = sum, na.rm = T))
plot(intervals, totalStepsPrInterval, col = "blue", lwd = 2, type = "l", xlab = "Interval number (50 corresponds to the 50th interval, which is about 4:05-4:10")
plot(act$interval, totalStepsPrInterval, col = "red", lwd = 2, type = "l", xlab = "Interval")
plot(unique(act$interval), totalStepsPrInterval, col = "red", lwd = 2, type = "l", xlab = "Interval")
plot(intervals, totalStepsPrInterval, main ="Time Series plot of daily average steps", col = "blue", lwd = 2, type = "l", xlab = "Interval number (50 corresponds to the 50th interval, which is about 4:05-4:10)", add = T)
plot(unique(act$interval), totalStepsPrInterval, col = "red", lwd = 2, type = "l", xlab = "Interval")
lines(intervals, totalStepsPrInterval)
max(totalstepsPrDay)
max(totalstepsPrInterval)
max(totalStepsPrInterval)
?max
max(totalStepsPrInterval
totalStepsPrInterval
unlist(totalStepsPrInterval)
a <- unlist(totalStepsPrInterval)
max(A)
max(a)
which(max(a))
?which
which(a == max(a))
which(a == max(a))[19]
which(a == max(a))[1]
which(a == max(a))[[1]]
which(a == max(a))[[0]]
a[104]
topSteps <- unlist(totalStepsPrInterval)
bestInterval <- which(topSteps == max(topSteps))
bestInterval
unique(act$intervals)[bestInterval]
unique(act$interval)
unique(act$interval)[bestInterval]
